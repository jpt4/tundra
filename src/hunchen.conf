# Here we define a cluster of hunchentoot servers
# this can later be extend for load-balancing
# if we had more instances of hunchentoot. In this
# case i only have one instance running.

upstream hunchentoot {
    server 127.0.0.1:8000;
}

server {
    listen 80;
    server_name myhome.com;

    rewrite ^(.*)/$ $1/home.html;

    # General request handling this will match all locations
    location / {

        root /var/www/myhome.com/public/;

        # Define custom HTTP Headers to be used when proxying
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;


        # if the requested file does not exist then
        # rewrite to the correct hunchentoot path
        # so that the proxy_pass can catch and pass on
        # to hunchentoot correctly - proxy_pass
        # cannot have anything but the servername/ip in it
        # else nginx complains so we have to rewrite and then
        # catch in another location later

	# auto serves /res/ from local hunchentoot push dir
}

location /lab {
# proxy to the hunchentoot server cluster
proxy_pass http://hunchentoot;
}
location /data {
# proxy to the hunchentoot server cluster
proxy_pass http://hunchentoot;
}
location /doc {
# proxy to the hunchentoot server cluster
proxy_pass http://hunchentoot;
}
location /theory {
# proxy to the hunchentoot server cluster
proxy_pass http://hunchentoot;
}
location /his {
# proxy to the hunchentoot server cluster
proxy_pass http://hunchentoot;
}

location /about {
# proxy to the hunchentoot server cluster
proxy_pass http://hunchentoot;
}

}

# sudo ln -si /etc/nginx/sites-available/myhome.com /etc/nginx/sites-enabled/myhome.com
# sudo /etc/init.d/nginx restart
